name: CI Tests

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
      - 'bug/**'
      - 'feature/**'
      - 'hotfix/**'
      - 'release/**'
  workflow_call:

env:
  PHP_VERSION: '8.1'

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-phpcs:
    name: Run Phpcs
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        id: ci-setup
        uses: ./.github/actions/ci-setup
        with:
          extensions: 'curl'
          extensions-cache-key: run-phpcs
          php-version: ${{ env.PHP_VERSION }}
          tools: 'composer, cs2pr, phpcs'

      - name: Run Phpcs
        id: phpcs
        run: composer phpcs
        env:
          CHANGED_FILES: ${{ steps.ci-setup.outputs.files }}

      - name: Show Phpcs results in PR
        if: ${{ always() && steps.phpcs.outcome == 'failure' }}
        run: cs2pr ./phpcs-report.xml

  run-phpstan:
    name: Run PHPStan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        id: ci-setup
        uses: ./.github/actions/ci-setup
        with:
          extensions: 'curl'
          extensions-cache-key: run-phpstan
          php-version: ${{ env.PHP_VERSION }}
          tools: 'composer, phpstan'

      - name: Run PHPStan
        continue-on-error: true # Allow PHPStan to fail (for now)
        id: phpstan
        run: composer phpstan
        env:
          CHANGED_FILES: ${{ steps.ci-setup.outputs.files }}

  run-psalm:
    name: Run Psalm
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        id: ci-setup
        uses: ./.github/actions/ci-setup
        with:
          extensions: 'curl'
          extensions-cache-key: run-psalm
          php-version: ${{ env.PHP_VERSION }}
          tools: 'composer, psalm'

      - name: Run Psalm
        continue-on-error: true # Allow Psalm to fail (for now)
        id: psalm
        run: composer psalm
        env:
          CHANGED_FILES: ${{ steps.ci-setup.outputs.files }}

  run-phpunit:
    name: Run PHPUnit
    runs-on: ubuntu-latest
    if: ${{ false }} # Disable for now
    # Docs: https://docs.github.com/en/actions/using-containerized-services
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: wordpress_test
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: wordpress_user
          MYSQL_PASSWORD: mysql_password
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        id: ci-setup
        uses: ./.github/actions/ci-setup
        with:
          extensions: 'curl, mysql, mysqli, zip'
          extensions-cache-key: run-phpunit
          php-version: ${{ env.PHP_VERSION }}
          tools: 'composer, phpunit'

      - name: Run PHPUnit
        id: phpunit
        run: |
          VERSION=$(echo "$WP_VERSION" | cut -d- -f1)
          ./vendor/bin/install-wp-tests.sh wordpress_test root root 127.0.0.1:${{ job.services.mysql.ports['3306'] }} "$WP_VERSION" true
          composer phpunit
        env:
          CHANGED_FILES: ${{ steps.ci-setup.outputs.files }}
          WORDPRESS_DB_HOST: 127.0.0.1:${{ job.services.mysql.ports['3306'] }}
          WP_VERSION: ${{ env.WP_VERSION }}
